// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image      UserImage?
  password   Password?
  notes      Note[]
  // üê® once you have the roles model, add a "roles" property that's an array of Roles
  Permission Permission[]
  Role       Role?        @relation(fields: [roleId], references: [id])
  roleId     String?
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Permission {
  id          String   @id @unique @default(uuid())
  action      String
  entity      String
  access      String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?

  @@unique([action, entity, access])
}

// üê® add a Permission model that has the following properties:
// - id (as usual)
// - action - a required string (will be one of create, read, update, delete)
// - entity - a required string (will be one of user or note)
// - access - a required string (will be one of own or any)
// - description - a required string (which can default to "")
// - createdAt (as usual)
// - updatedAt (as usual)
// - roles - an array of Roles
// @@unique constraint of action, entity, and access
// üìú https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#unique-1

model Role {
  id          String       @id @unique @default(uuid())
  name        String
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
  users       User[]
}

// üê® add a Role model that has an
// - id (as usual)
// - name - a required string
// - description - a required string (which can default to "")
// - createdAt (as usual)
// - updatedAt (as usual)
// - permissions - an array of Permissions
// - users - an array of Users
